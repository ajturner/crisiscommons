= Testing Crabgrass

== News

0.5.0
* Features now use Transforms. 
  Transforms are a great way to make features more readable. 
  However Cucumber 0.4.4 comes with a bug that makes it crash if 
  transforms are used and arguments to steps are left empty. We want 
  to use empty step arguments so please apply the fix from 
  http://github.com/robholland/cucumber/commit/59b51c8a2e7ff25eae33ddda559939719c726213 
  to your cucumber install. 
  Alternatively, the latest version of cucumber fixes this problem. 

== Important Rules When Writing Tests

(1) NEVER destroy a page that has been loaded from fixtures. This will mess up subsequent tests. Why? Because page_terms table cannot use transactions and so doesn't get rolled back.

(2) If you call enable_site_testing in setup(), then you MUST call disable_site_testing in teardown(). Otherwise, site testing will be stuck on and other tests fill fail.

== Required Gems for Running Tests

hpricot
nokogiri
launchy
machinist
faker
ruby-debug
leftright (optional but recommended, lerftright organizes and colorizes test output)

On debian, nokogiri requires: libxslt1-dev libxml2-dev

=== Requirements to Run Cucumber Features

gems:
  cucumber
  webrat
  langalex-culerity

packages:
  jruby > 1.4

jruby gems:
  celerity

= Cucumber and Javascript Tests

We can test the full stack of crabgrass (including ajax and other js) with cucumber. To write the tests you should be familiar with the tools involved

== Environments

  Non-javascript cucumber tests run in the 'cucumber' environment.
  Javascript cucumber tests run in the 'culerity_development' environment.

  You have to setup databases.yml to use the 'test' database for both of these environments.

== Cucumber Test Data

We're not using fixtures for Cucumber. We're using factories instead.

Machinist - a fixture replacement, it generates model records based on rules
Pickle    - a cucumber plugin that makes it very easy to drive machinist from cucumber steps. see: http://github.com/ianwhite/pickle

== Plain (non-js) Features

By default cucumber will run it's features in non-js ('simulated') mode. This is much faster than the js-mode. It uses webrat.

Webrat    - a rails integration testing library. it does not run a server, it manages the session, looks up routes and calls controller actions directly


== Javascript Features

HtmlUnit  - a headless browser written in java. It is faster than a regular browser (or should be) since it doesn't render visuals, but it treats JS as if it did.
Celerity  - a jruby wrapper on top of HtmlUnit. It loads the .jar in jruby and wrap java methods with nice ruby syntax.
Culerity  - stars a jruby process, loads Celerity in that process and passes calls to Celerity from our test environment.


In the javascript ('automated') mode cucumber will start a Mongrel server (in 'culerity_development' environment) and it will make HTTP requests to that server using Culerity as a browser.

If you want to run the culerity_development server in the foreground so you can use ruby-debugger run:
script/server -e culerity_development -p 3001

You have to mark all features you want to be automated with Culerity with a @js tag. See http://wiki.github.com/aslakhellesoy/cucumber/tags for discussion on tags.

NOTE: Because we're using @js tag to designate special test we can't use tags for anything else right now. This will be fixed in the later version of cucumber (see cucumber lighthouse ticket #504)

To run javascript cucumber scenarios use this command:
script/cucumber -p js features/path_to_my_ajax_stuff.feature


Check out config/cucumber.yml to see what "-p js" option does.

Since Celerity stays close to Watir interface in the future it could be possible to automate Internet Explorer, Firefox and other browsers.

some links:

http://github.com/jarib/celerity
http://github.com/langalex/culerity
http://jruby.org/download -- get the latest version and see the README - it's an easy install


= Integration Tests

Run 'rake db:fixtures:load RAILS_ENV=test' before running integration tests. Otherwise they will not work. Instead of fixtures, integration tests expect the whole database to be ready.

If an integration test modifies the page_terms table somehow (adding new permissions to pages for example) then it should clean it up (page_terms are non-transactional) by calling 'reset_page_terms_from_fixtures' in the 'teardown' method.


= Testings Mods

A great deal of the crabgrass code is in the form of engines-enhanced
and crabgrass-specific plugins. See docs/MODS and docs/TOOLS for
more information. To run the tests for these special plugins:

  rake test:tools:all
  rake test:mods:all

You can replace 'all' with 'units' or 'functionals'.

To run the test for a particular tool or mod:

  rake test:tools:all TOOL=gallery_tool
  rake test:mods:all MOD=translator

= Tests and Sites

When running tests, the request host is 'test.host'. There is a site with this domain setup in the fixtures. Normally, it is not enabled.

To run a test case with some site set, use enable_site_testing(site_fixture) in the setup method and disable_site_testing in teardown.


To run a test method with a particular site you can use with_site method For example:

  def test_local_title
    with_site :local do
      get :index
      assert_select 'title', "site1"
      assert_select 'title', Site.current.title
    end
  end

You can automatically repeat several tests with different site configs.
For example:

  repeat_with_sites(:local => {:title => "Site One"},
                  :test => {:title => "Site Two"}) do
    def test_title
      get :index
      assert_select 'title', Site.current.title
    end
  end

The above code will generate two methods:
1) test_title_with_site_local
2) test_title_with_site_test
Those methods will set the site properties and will execute the original code. 'test_title' will get renamed to 'do_test_title' which will prevent it from being run by itself.

Instead of overriding Conf parameters for test_with_sites (like {:title => ...}), you can use 'true' (or 'false' to disable) as a value. You can use site 'nil' to generate test_title_with_site_nil for no site testing.


= Adding a new page fixture

In pages.yml copy and paste an existing page fixture. Give it a unique name and id. Set the 'data_type' and 'data_id' to point to your data model. For example 'Wiki' and 1 for a new wiki page. Set created_by and update_by fields.

For examples sake, say you created a new page with these parameters (some stuff omitted):

my_wiki_page:
  id: 240
  title: my wiki
  type: WikiPage
  data_type: Wiki
  data_id: 2
  created_by_id: 1
  created_by_login: quentin
  updated_by_id: 3
  updated_by_login: gerrard


Edit user_participation.yml to setup correct permissions. Check the existing entries for the most up to date reference, but what you need is one entry for each user who should be allowed to edit you page. Each entry looks like this.

my_wiki_page_blue:
  id: <%= id+=1 %>
  page_id: 240
  user_id: 4
  access: 1

It should have a name like 'page_name' + _ + 'user_name' and the correct user_id field. Access can be 1 in most cases. Available options are
  admin: 1
  edit:  2
  view:  3
  none:  4

See config/initializers/00-constants.rb for reference.

Finally, after creating new user_participation fields. You must run these commands:

rake db:fixtures:load
rake cg:update_page_terms
rake cg:update_fixtures


They will update page_terms.yml fixtures, which is what is actually used for resolving permissions.

= Speeding Up Tests

TODO: use spork
